from panda3d.core import *
from direct.showbase.ShowBase import ShowBase
from direct.gui.OnscreenText import OnscreenText
from direct.task import Task

class ShooterGame(ShowBase):
    def __init__(self):
        super().__init__()
        
        # Load environment
        self.scene = self.loader.loadModel("models/environment")
        self.scene.reparentTo(self.render)
        self.scene.setScale(0.25, 0.25, 0.25)
        self.scene.setPos(-8, 42, 0)
        
        # Load rifle scope
        self.scope = OnscreenText(text="Scoped View", pos=(0, 0), scale=0.1, fg=(1,1,1,1))
        self.scope.hide()

        # Camera and movement
        self.disableMouse()
        self.camera.setPos(0, -10, 2)

        # Add a timer
        self.timer = 60
        self.timer_text = OnscreenText(text=f"Time: {self.timer}", pos=(-1, 0.9), scale=0.07)
        self.taskMgr.add(self.update_timer, "UpdateTimer")

    def update_timer(self, task):
        if self.timer > 0:
            self.timer -= globalClock.getDt()
            self.timer_text.setText(f"Time: {int(self.timer)}")
        else:
            self.timer_text.setText("Time's up!")
        return Task.cont

game = ShooterGame()
game.run()
from panda3d.core import *
from direct.showbase.ShowBase import ShowBase
from direct.gui.OnscreenText import OnscreenText
from direct.task import Task
import random

class ShooterGame(ShowBase):
    def __init__(self):
        super().__init__()
        
        # Disable default camera controls
        self.disableMouse()
        self.camera.setPos(0, -20, 2)
        self.camera.lookAt(0, 0, 0)

        # Load Environment
        self.scene = self.loader.loadModel("models/environment")
        self.scene.reparentTo(self.render)
        self.scene.setScale(0.25, 0.25, 0.25)
        self.scene.setPos(-8, 42, 0)

        # Targets
        self.targets = []
        self.create_targets()

        # Rifle Scope UI
        self.scope_overlay = OnscreenText(text="+", style=1, fg=(1, 0, 0, 1),
                                          pos=(0, 0), scale=0.1)
        self.scope_overlay.hide()
        self.is_scoped = False

        # Timer
        self.timer = 60
        self.timer_text = OnscreenText(text=f"Time Left: {int(self.timer)}",
                                       pos=(-1, 0.85), scale=0.07, fg=(1, 1, 1, 1))

       
